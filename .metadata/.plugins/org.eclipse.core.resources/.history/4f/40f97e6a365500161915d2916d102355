package handler;
import java.util.Date;
import java.util.HashSet;
import java.util.Set;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.TimeUnit;

import com.google.common.cache.Cache;
import com.google.common.cache.CacheBuilder;
import com.google.common.collect.Sets;


/**
@author junmeng.xu
@date  2016年7月28日下午5:05:32
 */
public class AnnounceStock extends AbstractAnnounce {

	private static final Cache<String, Set<String>> SID_CACHE = CacheBuilder.newBuilder().expireAfterWrite(3, TimeUnit.MINUTES).build();
	
	protected TbText0042Dao tbText0042Dao;
	
	@Override
	protected Set<String> getSidsFromJuchao(Date fromDate, Date toDate) {
		return tbText0042Dao.getSidsFromJuchao(fromDate, toDate);
	}

	@Override
	protected Set<String> removeExistsData(Date fromDate, Date toDate,
			Set<String> sids) {
		return removeExistsSid(fromDate, toDate, sids);
	}

	public Set<String> removeExistsSid(final Date from, final Date to, Set<String> ids) {
		Set<String> sidCache = new HashSet<>();
		try {
			sidCache = SID_CACHE.get(from.toString() + to.toString(),
                    () -> {
                    	return announcementStockDao.getSidsByDate(from, to); 
                    });
		} catch (ExecutionException e) {
			e.printStackTrace();
		}
		return Sets.newHashSet(Sets.difference(ids, sidCache));
	}
	

	public void setTbText0042Dao(TbText0042Dao tbText0042Dao) {
		this.tbText0042Dao = tbText0042Dao;
	}

}
