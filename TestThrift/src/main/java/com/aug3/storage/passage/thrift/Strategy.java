/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.aug3.storage.passage.thrift;

import java.util.ArrayList;
import java.util.Collections;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Generated;

import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;
import org.apache.thrift.scheme.TupleScheme;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2015-12-22")
public class Strategy implements org.apache.thrift.TBase<Strategy, Strategy._Fields>, java.io.Serializable, Cloneable, Comparable<Strategy> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Strategy");

  private static final org.apache.thrift.protocol.TField S_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("sType", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField BUCKET_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("bucketName", org.apache.thrift.protocol.TType.STRING, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new StrategyStandardSchemeFactory());
    schemes.put(TupleScheme.class, new StrategyTupleSchemeFactory());
  }

  /**
   * 
   * @see Storage
   */
  public Storage sType; // required
  public String bucketName; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 
     * @see Storage
     */
    S_TYPE((short)1, "sType"),
    BUCKET_NAME((short)2, "bucketName");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // S_TYPE
          return S_TYPE;
        case 2: // BUCKET_NAME
          return BUCKET_NAME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.S_TYPE, new org.apache.thrift.meta_data.FieldMetaData("sType", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, Storage.class)));
    tmpMap.put(_Fields.BUCKET_NAME, new org.apache.thrift.meta_data.FieldMetaData("bucketName", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Strategy.class, metaDataMap);
  }

  public Strategy() {
  }

  public Strategy(
    Storage sType,
    String bucketName)
  {
    this();
    this.sType = sType;
    this.bucketName = bucketName;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Strategy(Strategy other) {
    if (other.isSetSType()) {
      this.sType = other.sType;
    }
    if (other.isSetBucketName()) {
      this.bucketName = other.bucketName;
    }
  }

  public Strategy deepCopy() {
    return new Strategy(this);
  }

  
  public void clear() {
    this.sType = null;
    this.bucketName = null;
  }

  /**
   * 
   * @see Storage
   */
  public Storage getSType() {
    return this.sType;
  }

  /**
   * 
   * @see Storage
   */
  public Strategy setSType(Storage sType) {
    this.sType = sType;
    return this;
  }

  public void unsetSType() {
    this.sType = null;
  }

  /** Returns true if field sType is set (has been assigned a value) and false otherwise */
  public boolean isSetSType() {
    return this.sType != null;
  }

  public void setSTypeIsSet(boolean value) {
    if (!value) {
      this.sType = null;
    }
  }

  public String getBucketName() {
    return this.bucketName;
  }

  public Strategy setBucketName(String bucketName) {
    this.bucketName = bucketName;
    return this;
  }

  public void unsetBucketName() {
    this.bucketName = null;
  }

  /** Returns true if field bucketName is set (has been assigned a value) and false otherwise */
  public boolean isSetBucketName() {
    return this.bucketName != null;
  }

  public void setBucketNameIsSet(boolean value) {
    if (!value) {
      this.bucketName = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case S_TYPE:
      if (value == null) {
        unsetSType();
      } else {
        setSType((Storage)value);
      }
      break;

    case BUCKET_NAME:
      if (value == null) {
        unsetBucketName();
      } else {
        setBucketName((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case S_TYPE:
      return getSType();

    case BUCKET_NAME:
      return getBucketName();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case S_TYPE:
      return isSetSType();
    case BUCKET_NAME:
      return isSetBucketName();
    }
    throw new IllegalStateException();
  }

  
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Strategy)
      return this.equals((Strategy)that);
    return false;
  }

  public boolean equals(Strategy that) {
    if (that == null)
      return false;

    boolean this_present_sType = true && this.isSetSType();
    boolean that_present_sType = true && that.isSetSType();
    if (this_present_sType || that_present_sType) {
      if (!(this_present_sType && that_present_sType))
        return false;
      if (!this.sType.equals(that.sType))
        return false;
    }

    boolean this_present_bucketName = true && this.isSetBucketName();
    boolean that_present_bucketName = true && that.isSetBucketName();
    if (this_present_bucketName || that_present_bucketName) {
      if (!(this_present_bucketName && that_present_bucketName))
        return false;
      if (!this.bucketName.equals(that.bucketName))
        return false;
    }

    return true;
  }

  
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_sType = true && (isSetSType());
    list.add(present_sType);
    if (present_sType)
      list.add(sType.getValue());

    boolean present_bucketName = true && (isSetBucketName());
    list.add(present_bucketName);
    if (present_bucketName)
      list.add(bucketName);

    return list.hashCode();
  }

  
  public int compareTo(Strategy other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetSType()).compareTo(other.isSetSType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sType, other.sType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBucketName()).compareTo(other.isSetBucketName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBucketName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bucketName, other.bucketName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  
  public String toString() {
    StringBuilder sb = new StringBuilder("Strategy(");
    boolean first = true;

    sb.append("sType:");
    if (this.sType == null) {
      sb.append("null");
    } else {
      sb.append(this.sType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("bucketName:");
    if (this.bucketName == null) {
      sb.append("null");
    } else {
      sb.append(this.bucketName);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (sType == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'sType' was not present! Struct: " + toString());
    }
    if (bucketName == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'bucketName' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class StrategyStandardSchemeFactory implements SchemeFactory {
    public StrategyStandardScheme getScheme() {
      return new StrategyStandardScheme();
    }
  }

  private static class StrategyStandardScheme extends StandardScheme<Strategy> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Strategy struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // S_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.sType = com.aug3.storage.passage.thrift.Storage.findByValue(iprot.readI32());
              struct.setSTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // BUCKET_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.bucketName = iprot.readString();
              struct.setBucketNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Strategy struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.sType != null) {
        oprot.writeFieldBegin(S_TYPE_FIELD_DESC);
        oprot.writeI32(struct.sType.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.bucketName != null) {
        oprot.writeFieldBegin(BUCKET_NAME_FIELD_DESC);
        oprot.writeString(struct.bucketName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class StrategyTupleSchemeFactory implements SchemeFactory {
    public StrategyTupleScheme getScheme() {
      return new StrategyTupleScheme();
    }
  }

  private static class StrategyTupleScheme extends TupleScheme<Strategy> {

    
    public void write(org.apache.thrift.protocol.TProtocol prot, Strategy struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI32(struct.sType.getValue());
      oprot.writeString(struct.bucketName);
    }

    
    public void read(org.apache.thrift.protocol.TProtocol prot, Strategy struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.sType = com.aug3.storage.passage.thrift.Storage.findByValue(iprot.readI32());
      struct.setSTypeIsSet(true);
      struct.bucketName = iprot.readString();
      struct.setBucketNameIsSet(true);
    }
  }

}

